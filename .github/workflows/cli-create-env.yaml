name: CLI Create demo env

on:
  workflow_dispatch:
    inputs:
      DEVCENTER_NAME:
        description: 'DevCenter Name'     
        required: true
        default: 'devcenterdemolgm'
      PROJECT_NAME:
        description: 'Project Name' 
        required: true
        default: 'DevProject'
      RESOURCE_GROUP:
        description: 'Resource Group' 
        required: true
        default: 'rg-demo-ade'
      LOCATION: 
        description: 'Azure Region to deploy resources'
        required: true
        default: 'westeurope'
        type: choice
        options:
          - 'northeurope'
          - 'westeurope'
          - 'francecentral'
      KV_NAME:
        description: 'Keyvault name' 
        required: true
        default: 'kv-demoadelgm'
      ACR_NAME:
        description: 'ACR name' 
        required: true
        default: 'acrdemoadelgm'
      PAT_TOKEN:
          description: 'PAT allowing to access your Github Repo' 
          required: false
      DEMO_USER:
        description: 'User used to access the DevCenter (must NOT be a guest user)' 
        required: true
        default: 'lgmorand@lgmdemo.onmicrosoft.com'
jobs:

  CreatingRG:
    runs-on: ubuntu-latest
    steps:
      - name: AZ Login
        run: az login --service-principal -u ${{ vars.AZ_LOGIN }} -p ${{ secrets.AZ_PASSWORD }} --tenant ${{ vars.AZ_TENANT }}
 
      - name: creating RG
        run: az group create --name ${{ github.event.inputs.RESOURCE_GROUP }} -l ${{ github.event.inputs.LOCATION }}

  BuildTerraformImage:
    runs-on: ubuntu-latest
    needs: CreatingRG

    steps:
      - uses: actions/checkout@main

      - name: AZ Login
        run: az login --service-principal -u ${{ vars.AZ_LOGIN }} -p ${{ secrets.AZ_PASSWORD }} --tenant ${{ vars.AZ_TENANT }}

      - name: deploy infra
        run : |
          az acr create -n ${{ github.event.inputs.ACR_NAME }} -g ${{ github.event.inputs.RESOURCE_GROUP }} --sku Standard
          az acr update --name ${{ github.event.inputs.ACR_NAME }} --anonymous-pull-enabled

          SERVICE_PRINCIPAL_NAME="spn-demoade"
          ACR_REGISTRY_ID=$(az acr show --name ${{ github.event.inputs.ACR_NAME }} --query "id" --output tsv)
          ENDPOINT="${{ github.event.inputs.ACR_NAME }}.azurecr.io"
          PASSWORD=$(az ad sp create-for-rbac --name $SERVICE_PRINCIPAL_NAME --scopes $ACR_REGISTRY_ID --role acrpush --query "password" --output tsv)
          sleep 60 
          
          USERNAME=$(az ad sp list --display-name $SERVICE_PRINCIPAL_NAME --query "[].appId" --output tsv)
          az role assignment create --assignee $USERNAME \
          --role "acrpull" \
          --scope $ACR_REGISTRY_ID

          echo "ACR_ENDPOINT=$ENDPOINT" >> "$GITHUB_ENV"
          echo "ACR_LOGIN=$USERNAME" >> "$GITHUB_ENV"
          echo "ACR_PASSWORD=$PASSWORD" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_ENDPOINT }}
          username: ${{ env.ACR_LOGIN }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and Push to ACR
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:deployment-container"
          push: true
          tags: "${{ github.event.inputs.ACR_NAME }}.azurecr.io/adetf:1.0"

  Deploy:
    runs-on: ubuntu-latest
    needs: [CreatingRG]

    steps:
      - uses: actions/checkout@main
          
      - name: AZ Login
        run: az login --service-principal -u ${{ vars.AZ_LOGIN }} -p ${{ secrets.AZ_PASSWORD }} --tenant ${{ vars.AZ_TENANT }}
        
      - name: Prerequisites
        run: |
          # install extension silently
          az config set extension.use_dynamic_install=yes_without_prompt

          # install extension
          az extension add --name devcenter --allow-preview true

      - name: Deploy
        run: |
          RED="\e[31m"
          GREEN="\e[32m"
          ORANGE="\e[95m"
          ENDCOLOR="\e[0m" 

          # create keyvault & inject PAT as secret

          echo "Creating keyvault"
          kvName=$(az keyvault list-deleted --query "[?contains(name, '${{ github.event.inputs.KV_NAME }}')].name" -o tsv)

                    case "$kvName" in 
          "${{ github.event.inputs.KV_NAME }}" )  printf $"${ORANGE}KV name already exists. Trying to purge old version first ${ENDCOLOR}\n\n"
            az keyvault purge --name "${{ github.event.inputs.KV_NAME }}";;
          *) ;;
          esac

          az keyvault create -n "${{ github.event.inputs.KV_NAME }}" -l ${{ github.event.inputs.LOCATION }} -g "${{ github.event.inputs.RESOURCE_GROUP }}"  -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "add rights to KV"
          export KEYVAULT_RESOURCE_ID="$(az keyvault show -g "${{ github.event.inputs.RESOURCE_GROUP }}" -n ${{ github.event.inputs.KV_NAME }} --query id -o tsv)"
          az role assignment create --role "Key Vault Administrator" --assignee ${{ vars.AZ_LOGIN }} --scope $KEYVAULT_RESOURCE_ID -o none
          sleep 120 # wait for propagation
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          export GHPAT="${{ github.event.inputs.PAT_TOKEN }}"
          if [ -z "$GHPAT" ]
          then
              echo "create secret using PAT given in secrets"
              az keyvault secret set --vault-name "${{ github.event.inputs.KV_NAME }}" --name GHPAT --value "${{ secrets.PAT_TOKEN }}" -o none
          else
             echo "create secret using PAT given in input"
              az keyvault secret set --vault-name "${{ github.event.inputs.KV_NAME }}" --name GHPAT --value "${{ github.event.inputs.PAT_TOKEN }}"  -o none
          fi
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "Creating dev center"
          az devcenter admin devcenter create --location "${{ github.event.inputs.LOCATION }}" --name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "Enabling managed identity on DevCenter"
          az devcenter admin devcenter update -n "${{ github.event.inputs.DEVCENTER_NAME }}" --identity-type SystemAssigned --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # retrieving DevCenter identity
          echo "Retrieving managed identity"
          OID=$(az ad sp list --display-name "${{ github.event.inputs.DEVCENTER_NAME }}" --query [].id -o tsv)
          printf "${ORANGE}$OID${ENDCOLOR}\n"

          sleep 30 # wait for replication

          echo -e "Creating KV policy"
          az role assignment create --role "Key Vault Secrets User" --assignee "$OID" --scope $KEYVAULT_RESOURCE_ID -o none
          sleep 120 # wait for propagation
          #az keyvault set-policy -n "${{ github.event.inputs.KV_NAME }}" --secret-permissions get --object-id $OID -g ${{ github.event.inputs.RESOURCE_GROUP }} -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"
          
          # retrieve DevCenterId & principalID
          echo "Retrieving IDs"
          DEVCENTER_ID=$(az devcenter admin devcenter show --name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query=id -o tsv)
          DEV_CENTER_CLIENT_ID=$(az devcenter admin devcenter show \
          --name "${{ github.event.inputs.DEVCENTER_NAME }}" \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --query identity.principalId -o tsv)
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # Create environment types
          echo "Creating environments"
          az devcenter admin environment-type create --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --name "PROD" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          az devcenter admin environment-type create --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --name "TEST" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          az devcenter admin environment-type create --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --name "DEV" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # create a project
          echo "Creating projects"
          az devcenter admin project create --location "${{ github.event.inputs.LOCATION }}" --description "This is my first project." --dev-center-id "$DEVCENTER_ID" --name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --max-dev-boxes-per-user "3" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # create a DevBox
          echo "Creating dev box"
          az devcenter admin devbox-definition create --location "${{ github.event.inputs.LOCATION }}" --image-reference id="/subscriptions/${{ vars.SUBSCRIPTION_ID }}/resourceGroups/${{ github.event.inputs.RESOURCE_GROUP }}/providers/Microsoft.DevCenter/devcenters/${{ github.event.inputs.DEVCENTER_NAME }}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2" --os-storage-type "ssd_256gb" --sku name="general_i_8c32gb256ssd_v2" --name "WebDevBox" --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          az devcenter admin devbox-definition create --location "${{ github.event.inputs.LOCATION }}" --image-reference id="/subscriptions/${{ vars.SUBSCRIPTION_ID }}/resourceGroups/${{ github.event.inputs.RESOURCE_GROUP }}/providers/Microsoft.DevCenter/devcenters/${{ github.event.inputs.DEVCENTER_NAME }}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2" --os-storage-type "ssd_512gb" --sku name="general_i_32c128gb512ssd_v2" --name "SuperPowerfulDevBox" --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # create a catalog
          echo "Creating catalog"
          SECRETID=$(az keyvault secret show --vault-name ${{ github.event.inputs.KV_NAME }} --name GHPAT --query id -o tsv)
          printf "${ORANGE} $SECRETID ${ENDCOLOR}\n"
          REPO_URL="https://github.com/lgmorand/azure-ade-devbox.git"
          az devcenter admin catalog create --git-hub path="/catalog" branch="main" secret-identifier=$SECRETID uri=$REPO_URL -n "EnvCatalog" -d "${{ github.event.inputs.DEVCENTER_NAME }}" -g ${{ github.event.inputs.RESOURCE_GROUP }} -o none
          REPO_URL="https://github.com/microsoft/devcenter-catalog.git"
          az devcenter admin catalog create --git-hub path="/Tasks" branch="main" secret-identifier=$SECRETID uri=$REPO_URL -n "QuickStart" -d "${{ github.event.inputs.DEVCENTER_NAME }}" -g ${{ github.event.inputs.RESOURCE_GROUP }} -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # creating pools
          echo "Creating pools"
          az devcenter admin pool create --location "${{ github.event.inputs.LOCATION }}" --devbox-definition-name "WebDevBox" --pool-name "DevPool" --project-name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --local-administrator "Enabled" --virtual-network-type "Managed" --managed-virtual-network-regions "westeurope" -o none
          az devcenter admin pool create --location "${{ github.event.inputs.LOCATION }}" --devbox-definition-name "SuperPowerfulDevBox" --pool-name "DevPoolPowerFull" --project-name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --local-administrator "Enabled" --virtual-network-type "Managed" --managed-virtual-network-regions "westeurope" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"


          echo "creating projects environments types"
          OWNER_ROLE_ID=$(az role definition list -n "Owner" --scope /subscriptions/${{ vars.SUBSCRIPTION_ID }} --query '[].name' -o tsv)

          az devcenter admin project-environment-type create \
          --name "DEV" \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --project-name ${{ github.event.inputs.PROJECT_NAME }} \
          --roles "{\"$OWNER_ROLE_ID\":{}}" \
          --identity-type "SystemAssigned" \
          --deployment-target-id "/subscriptions/${{ vars.SUBSCRIPTION_ID }}" \
          --status "Enabled" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "giving access to the user"
          ENTRA_ID_USER_ID=$(az ad user show --id ${{ github.event.inputs.DEMO_USER }} --query id -o tsv)
          az role assignment create \
            --role "DevCenter Dev Box User" \
            --assignee $ENTRA_ID_USER_ID \
            --scope $(az devcenter admin project show --name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv) -o none
          az role assignment create \
          --role "Deployment Environments User" \
          --assignee $ENTRA_ID_USER_ID \
          --scope $(az devcenter admin project show --name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv) -o none
          
          az role assignment create \
          --role "DevCenter Project Admin" \
          --assignee $ENTRA_ID_USER_ID \
          --scope $(az devcenter admin project show --name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv) -o none
          
          
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # Custom Image
          export IMAGE_BUILDER_GALLERY_NAME="imagebuildergallery"
          echo -e "Creating Azure Compute Gallery $IMAGE_BUILDER_GALLERY_NAME in $LOCATION"
          az sig create \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --location "${{ github.event.inputs.LOCATION }}" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "Let's assign the Contributor role to the Dev Center for the gallery"
          az role assignment create \
          --role "Contributor" \
          --assignee $DEV_CENTER_CLIENT_ID \
          --scope $(az sig show --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv) \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "Let's assign the Owner role to the Dev Center for the subscription in order to be able to create environment"
          az role assignment create \
          --role "Owner" \
          --assignee $DEV_CENTER_CLIENT_ID \
          --scope "/subscriptions/${{ vars.SUBSCRIPTION_ID}}" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "Then you can associate the gallery with the Dev Center"
          az devcenter admin gallery create \
          --name $IMAGE_BUILDER_GALLERY_NAME \
          --gallery-resource-id $(az sig show --gallery-name $IMAGE_BUILDER_GALLERY_NAME --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv) \
          --dev-center "${{ github.event.inputs.DEVCENTER_NAME }}" \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo -e "Creating image definition vscodeImage in Azure Compute Gallery $IMAGE_BUILDER_GALLERY_NAME"

          az sig image-definition create \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --gallery-image-definition "vscodeImage" \
          --os-type "Windows" \
          --os-state "Generalized" \
          --publisher "lgmorand" \
          --offer "vscodebox" \
          --sku "1-0-0" \
          --hyper-v-generation "V2" \
          --features "SecurityType=TrustedLaunch" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          IMAGE_BUILDER_IDENTITY="image-builder-identity"
          echo -e "Creating Azure Image Builder identity $IMAGE_BUILDER_IDENTITY"

          IDENTITY_CLIENT_ID=$(az identity create \
          --name $IMAGE_BUILDER_IDENTITY \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --query clientId -o tsv)
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo -e "Wait 30 seconds for the identity to be created 🕒"
          sleep 30

          echo -e "Assigning role to Azure Image Builder identity $IMAGE_BUILDER_IDENTITY"

          roleId=$(az role definition list --query "[?contains(roleName, 'Azure Image Builder Service Image Creation Role')].id" -o tsv)
          if [ -z "$roleId" ]
          then
          
            az role definition create -o none --role-definition @- <<EOF
            {
                "Name": "Azure Image Builder Service Image Creation Role",
                "IsCustom": true,
                "Description": "Image Builder access to create resources for the image build, you should delete or split out as appropriate",
                "Actions": [
                    "Microsoft.Compute/galleries/read",
                    "Microsoft.Compute/galleries/images/read",
                    "Microsoft.Compute/galleries/images/versions/read",
                    "Microsoft.Compute/galleries/images/versions/write",

                    "Microsoft.Compute/images/write",
                    "Microsoft.Compute/images/read",
                    "Microsoft.Compute/images/delete"
                ],
                "NotActions": [
              
                ],
                "AssignableScopes": [
                  "/subscriptions/${{ vars.SUBSCRIPTION_ID }}"
                ]
              }
          EOF

          else
            printf $"${ORANGE}\u2714 Role already exists, no need to create ${ORANGE}\n\n"
          fi

          

          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo -e "Assign the custom role to the identity $IMAGE_BUILDER_IDENTITY"

          az role assignment create \
          --role "Azure Image Builder Service Image Creation Role" \
          --assignee $IDENTITY_CLIENT_ID \
          --scope /subscriptions/${{ vars.SUBSCRIPTION_ID }}/resourceGroups/${{ github.event.inputs.RESOURCE_GROUP }} -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # echo -e "Check the role was assigned successfully ✅"
          # az role assignment list --assignee $IDENTITY_CLIENT_ID --all -o table

          IDENTITY_ID=$(az identity show --name $IMAGE_BUILDER_IDENTITY --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv)
          
          echo -e "The easiest way to generate the template is using this assistant: https://portal.azure.com/#create/Microsoft.ImageTemplate"
          
          VSCODE_IMAGE_NAME="vscodeWinImage"
          VSCODE_RUN_OUTPUT_NAME="vscodeWinImageRunOutput"
          VSCODE_IMAGE_TEMPLATE="vscodeTemplate"
          VSCODE_IMAGE_DEFINITION="vscodeImage"

          mkdir -p tmp
          cp custom-images/win11-with-vscode.json tmp/win11-with-vscode.json
          
          sed -i -e "s%<subscriptionID>%${{ vars.SUBSCRIPTION_ID }}%g" tmp/win11-with-vscode.json
          sed -i -e "s%<rgName>%${{ github.event.inputs.RESOURCE_GROUP }}%g" tmp/win11-with-vscode.json
          sed -i -e "s%<region1>%${{ github.event.inputs.LOCATION }}%g" tmp/win11-with-vscode.json
          sed -i -e "s%<runOutputName>%$VSCODE_RUN_OUTPUT_NAME%g" tmp/win11-with-vscode.json
          sed -i -e "s%<sharedImageGalName>%$IMAGE_BUILDER_GALLERY_NAME%g" tmp/win11-with-vscode.json
          sed -i -e "s%<imgBuilderId>%$IDENTITY_ID%g" tmp/win11-with-vscode.json
          sed -i -e "s%<imageDefName>%$VSCODE_IMAGE_DEFINITION%g" tmp/win11-with-vscode.json
          
          
          echo -e "This template needs some parameters so let's create a parameters file"
          
          cat <<EOF > tmp/win11-with-vscode-parameters.json
          {
            "imageTemplateName": {
              "value": "$VSCODE_IMAGE_TEMPLATE"
            },
            "api-version": {
              "value": "2020-02-14"
            },
            "svclocation": {
              "value": "${{ github.event.inputs.LOCATION }}"
            }
          }
          EOF
          
          echo -e "And now let's create the Image Template using this ARM template 😁"
          
          az deployment group create \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --template-file tmp/win11-with-vscode.json \
          --parameters @tmp/win11-with-vscode-parameters.json \
          -o none
          
          echo -e "We have the image template but now we need to create an image inside the gallery. Let's run Azure Image Builder to create it"
          
          echo "Creating the image (can take 40+ minutes)"
          time az image builder run \
          --name $VSCODE_IMAGE_TEMPLATE \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          sleep 30

          IMAGE_REFERENCE_ID=$(az devcenter admin image show \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --dev-center ${{ github.event.inputs.DEVCENTER_NAME }} \
          --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --name  $VSCODE_IMAGE_DEFINITION \
          --query id -o tsv)

          printf $"${ORANGE}\u2714 Image reference: $IMAGE_REFERENCE_ID ${ORANGE}\n\n"

          DEV_BOX_FOR_CUSTOM_IMAGE_WITH_IMAGE_BUILDER="devbox-for-custom-image-with-image-builder"
          CUSTOM_IMAGE_DEV_BOX_POOL_NAME="custom-image-dev-box-pool"

          echo "creating the devbox-definition (40min)"
          time az devcenter admin devbox-definition create \
          --name $DEV_BOX_FOR_CUSTOM_IMAGE_WITH_IMAGE_BUILDER \
          --dev-center ${{ github.event.inputs.DEVCENTER_NAME }} \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --image-reference id=$IMAGE_REFERENCE_ID \
          --os-storage-type "ssd_256gb" \
          --sku name="general_i_8c32gb256ssd_v2" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          sleep 10

          echo -e "Create a dev box pool for project name: ${{ github.event.inputs.PROJECT_NAME }}"
          az devcenter admin pool create --location "${{ github.event.inputs.LOCATION }}" \
          --devbox-definition-name $DEV_BOX_FOR_CUSTOM_IMAGE_WITH_IMAGE_BUILDER \
          --pool-name "$CUSTOM_IMAGE_DEV_BOX_POOL_NAME" \
          --project-name "${{ github.event.inputs.PROJECT_NAME }}" \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --local-administrator "Enabled" \
          --virtual-network-type "Managed" \
          --managed-virtual-network-regions "westeurope" \
          -o none
         
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"
          
          echo "::notice::You can now access your DevCenter at https://devportal.microsoft.com/"

  Clean:
    runs-on: ubuntu-latest
    needs: [Deploy, BuildTerraformImage]

    steps:
      - uses: igorjs/gh-actions-clean-workflow@main
        with:
          runs_older_than: 1 
          token: ${{ github.token }}
          runs_to_keep: 1